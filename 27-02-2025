#.873. Length of Longest Fibonacci Subsequence.

class Solution {
    public int lenLongestFibSubseq(int[] arr) {
        int n = arr.length;
        Map<Integer, Integer> indexMap = new HashMap<>();
        int[][] dp = new int[n][n];
        int maxLen = 0;

        // Store the index of each number in arr for quick lookup
        for (int i = 0; i < n; i++) {
            indexMap.put(arr[i], i);
        }

        // Iterate over all pairs (i, j)
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = arr[j] - arr[i]; // Find the previous element needed
                int k = indexMap.getOrDefault(a, -1);

                // Check if arr[k] exists and is before arr[i]
                if (k >= 0 && k < i) {
                    dp[i][j] = dp[k][i] + 1;
                } else {
                    dp[i][j] = 2; // At least a pair exists
                }

                maxLen = Math.max(maxLen, dp[i][j]);
            }
        }

        return maxLen > 2 ? maxLen : 0; // If no valid sequence is found, return 0
    }
}
