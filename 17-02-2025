#.1079. Letter Tile Possibilities.
import java.util.*;

class Solution {
    public int numTilePossibilities(String tiles) {
        // Frequency map to store the count of each character
        Map<Character, Integer> freqMap = new HashMap<>();
        
        // Fill frequency map
        for (char ch : tiles.toCharArray()) {
            freqMap.put(ch, freqMap.getOrDefault(ch, 0) + 1);
        }
        
        // Set to store unique sequences
        Set<String> result = new HashSet<>();
        
        // Start backtracking to generate all sequences
        backtrack(freqMap, "", result);
        
        // Return the number of unique non-empty sequences
        return result.size();
    }
    
    // Backtracking helper function
    private void backtrack(Map<Character, Integer> freqMap, String current, Set<String> result) {
        // If the current sequence is not empty, add it to the result
        if (!current.isEmpty()) {
            result.add(current);
        }
        
        // Try adding each character to the sequence
        for (char ch : freqMap.keySet()) {
            int count = freqMap.get(ch);
            
            // If the character can still be used
            if (count > 0) {
                // Choose the character and reduce its count
                freqMap.put(ch, count - 1);
                
                // Recurse with the updated sequence
                backtrack(freqMap, current + ch, result);
                
                // Backtrack: undo the choice
                freqMap.put(ch, count);
            }
        }
    }
}
