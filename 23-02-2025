#.889. Construct Binary Tree from Preorder and Postorder Traversal.

class Solution {
    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
        Map<Integer, Integer> postIndex = new HashMap<>();
        for (int i = 0; i < postorder.length; i++) {
            postIndex.put(postorder[i], i);
        }
        return buildTree(preorder, 0, preorder.length - 1, postorder, 0, postorder.length - 1, postIndex);
    }
    
    private TreeNode buildTree(int[] preorder, int preStart, int preEnd, 
                               int[] postorder, int postStart, int postEnd, 
                               Map<Integer, Integer> postIndex) {
        if (preStart > preEnd) return null;

        // Root node
        TreeNode root = new TreeNode(preorder[preStart]);
        if (preStart == preEnd) return root; // Single node case

        // Find left child in postorder
        int leftChild = preorder[preStart + 1];
        int leftSubtreeSize = postIndex.get(leftChild) - postStart + 1;

        // Construct left and right subtrees recursively
        root.left = buildTree(preorder, preStart + 1, preStart + leftSubtreeSize, 
                              postorder, postStart, postStart + leftSubtreeSize - 1, postIndex);
        
        root.right = buildTree(preorder, preStart + leftSubtreeSize + 1, preEnd, 
                               postorder, postStart + leftSubtreeSize, postEnd - 1, postIndex);

        return root;
    }
}
